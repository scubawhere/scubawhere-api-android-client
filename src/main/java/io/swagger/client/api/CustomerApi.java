/**
 * Scubawhere API Documentation
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.swagger.client.model.ErrorModel;
import io.swagger.client.model.InlineResponse20029;
import java.util.Date;
import io.swagger.client.model.InlineResponse2003;
import io.swagger.client.model.InlineResponse20030;
import io.swagger.client.model.Customer;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class CustomerApi {
  String basePath = "https://dev.scubawhere.com/api";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Create a new customer
  * 
   * @param email 
   * @param firstname 
   * @param lastname 
   * @param birthday 
   * @param gender 
   * @param address1 
   * @param address2 
   * @param city 
   * @param county 
   * @param postcode 
   * @param countryId 
   * @param phone 
   * @param lastDive 
   * @param numberOfDives 
   * @param chestSize 
   * @param showSize 
   * @param height 
   * @param certificates 
   * @return InlineResponse20029
  */
  public InlineResponse20029 createCustomer (String email, String firstname, String lastname, Date birthday, Integer gender, String address1, String address2, String city, String county, String postcode, Long countryId, String phone, Date lastDive, Integer numberOfDives, String chestSize, String showSize, String height, List<Long> certificates) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'email' is set
      if (email == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'email' when calling createCustomer",
      new ApiException(400, "Missing the required parameter 'email' when calling createCustomer"));
      }
  
      // verify the required parameter 'firstname' is set
      if (firstname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'firstname' when calling createCustomer",
      new ApiException(400, "Missing the required parameter 'firstname' when calling createCustomer"));
      }
  
      // verify the required parameter 'lastname' is set
      if (lastname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lastname' when calling createCustomer",
      new ApiException(400, "Missing the required parameter 'lastname' when calling createCustomer"));
      }
  

  // create path and map variables
  String path = "/customer/add".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "email", email));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "firstname", firstname));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "lastname", lastname));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "birthday", birthday));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "gender", gender));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "address_1", address1));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "address_2", address2));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "city", city));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "county", county));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "postcode", postcode));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "country_id", countryId));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "phone", phone));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "last_dive", lastDive));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "number_of_dives", numberOfDives));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "chest_size", chestSize));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "show_size", showSize));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "height", height));
          queryParams.addAll(ApiInvoker.parameterToPairs("multi", "certificates", certificates));


      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (InlineResponse20029) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20029.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Create a new customer
   * 
   * @param email    * @param firstname    * @param lastname    * @param birthday    * @param gender    * @param address1    * @param address2    * @param city    * @param county    * @param postcode    * @param countryId    * @param phone    * @param lastDive    * @param numberOfDives    * @param chestSize    * @param showSize    * @param height    * @param certificates 
  */
  public void createCustomer (String email, String firstname, String lastname, Date birthday, Integer gender, String address1, String address2, String city, String county, String postcode, Long countryId, String phone, Date lastDive, Integer numberOfDives, String chestSize, String showSize, String height, List<Long> certificates, final Response.Listener<InlineResponse20029> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'email' is set
    if (email == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'email' when calling createCustomer",
         new ApiException(400, "Missing the required parameter 'email' when calling createCustomer"));
    }
    
    // verify the required parameter 'firstname' is set
    if (firstname == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'firstname' when calling createCustomer",
         new ApiException(400, "Missing the required parameter 'firstname' when calling createCustomer"));
    }
    
    // verify the required parameter 'lastname' is set
    if (lastname == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'lastname' when calling createCustomer",
         new ApiException(400, "Missing the required parameter 'lastname' when calling createCustomer"));
    }
    

    // create path and map variables
    String path = "/customer/add".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "email", email));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "firstname", firstname));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lastname", lastname));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "birthday", birthday));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "gender", gender));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "address_1", address1));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "address_2", address2));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "city", city));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "county", county));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "postcode", postcode));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "country_id", countryId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "phone", phone));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "last_dive", lastDive));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "number_of_dives", numberOfDives));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "chest_size", chestSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "show_size", showSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "height", height));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "certificates", certificates));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse20029) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse20029.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete a customer by ID
  * 
   * @param id 
   * @return InlineResponse2003
  */
  public InlineResponse2003 deleteCustomer (Long id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'id' is set
      if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling deleteCustomer",
      new ApiException(400, "Missing the required parameter 'id' when calling deleteCustomer"));
      }
  

  // create path and map variables
  String path = "/customer/delete".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));


      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (InlineResponse2003) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2003.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Delete a customer by ID
   * 
   * @param id 
  */
  public void deleteCustomer (Long id, final Response.Listener<InlineResponse2003> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'id' is set
    if (id == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'id' when calling deleteCustomer",
         new ApiException(400, "Missing the required parameter 'id' when calling deleteCustomer"));
    }
    

    // create path and map variables
    String path = "/customer/delete".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse2003) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse2003.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update a customer by ID
  * 
   * @param id 
   * @param email 
   * @param firstname 
   * @param lastname 
   * @param birthday 
   * @param gender 
   * @param address1 
   * @param address2 
   * @param city 
   * @param county 
   * @param postcode 
   * @param countryId 
   * @param phone 
   * @param lastDive 
   * @param numberOfDives 
   * @param chestSize 
   * @param showSize 
   * @param height 
   * @param certificates 
   * @return InlineResponse20030
  */
  public InlineResponse20030 editCustomer (Long id, String email, String firstname, String lastname, Date birthday, Integer gender, String address1, String address2, String city, String county, String postcode, Long countryId, String phone, Date lastDive, Integer numberOfDives, String chestSize, String showSize, String height, List<Long> certificates) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'id' is set
      if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling editCustomer",
      new ApiException(400, "Missing the required parameter 'id' when calling editCustomer"));
      }
  

  // create path and map variables
  String path = "/customer/edit".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "email", email));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "firstname", firstname));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "lastname", lastname));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "birthday", birthday));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "gender", gender));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "address_1", address1));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "address_2", address2));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "city", city));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "county", county));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "postcode", postcode));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "country_id", countryId));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "phone", phone));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "last_dive", lastDive));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "number_of_dives", numberOfDives));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "chest_size", chestSize));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "show_size", showSize));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "height", height));
          queryParams.addAll(ApiInvoker.parameterToPairs("multi", "certificates", certificates));


      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (InlineResponse20030) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20030.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Update a customer by ID
   * 
   * @param id    * @param email    * @param firstname    * @param lastname    * @param birthday    * @param gender    * @param address1    * @param address2    * @param city    * @param county    * @param postcode    * @param countryId    * @param phone    * @param lastDive    * @param numberOfDives    * @param chestSize    * @param showSize    * @param height    * @param certificates 
  */
  public void editCustomer (Long id, String email, String firstname, String lastname, Date birthday, Integer gender, String address1, String address2, String city, String county, String postcode, Long countryId, String phone, Date lastDive, Integer numberOfDives, String chestSize, String showSize, String height, List<Long> certificates, final Response.Listener<InlineResponse20030> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'id' is set
    if (id == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'id' when calling editCustomer",
         new ApiException(400, "Missing the required parameter 'id' when calling editCustomer"));
    }
    

    // create path and map variables
    String path = "/customer/edit".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "email", email));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "firstname", firstname));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lastname", lastname));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "birthday", birthday));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "gender", gender));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "address_1", address1));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "address_2", address2));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "city", city));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "county", county));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "postcode", postcode));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "country_id", countryId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "phone", phone));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "last_dive", lastDive));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "number_of_dives", numberOfDives));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "chest_size", chestSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "show_size", showSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "height", height));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "certificates", certificates));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse20030) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse20030.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve all customers
  * 
   * @return List<Customer>
  */
  public List<Customer> getAllCustomers () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/customer/all".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (List<Customer>) ApiInvoker.deserialize(localVarResponse, "array", Customer.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Retrieve all customers
   * 

  */
  public void getAllCustomers (final Response.Listener<List<Customer>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/customer/all".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Customer>) ApiInvoker.deserialize(localVarResponse,  "array", Customer.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve a customer by ID
  * 
   * @param id 
   * @return InlineResponse20029
  */
  public InlineResponse20029 getCustomer (Long id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/customer".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));


      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (InlineResponse20029) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20029.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Retrieve a customer by ID
   * 
   * @param id 
  */
  public void getCustomer (Long id, final Response.Listener<InlineResponse20029> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/customer".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse20029) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse20029.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
