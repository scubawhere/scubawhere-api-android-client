/**
 * Scubawhere API Documentation
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.swagger.client.model.BasePrice;
import io.swagger.client.model.ErrorModel;
import io.swagger.client.model.InlineResponse2014;
import java.util.Date;
import io.swagger.client.model.Ticket;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class TicketApi {
  String basePath = "https://dev.scubawhere.com/api";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Create a new ticket
  * 
   * @param name 
   * @param trips 
   * @param prices 
   * @param description 
   * @param availableFrom 
   * @param availableUntil 
   * @param onlyPackaged 
   * @param boats 
   * @param boatrooms 
   * @return InlineResponse2014
  */
  public InlineResponse2014 addTicket (String name, List<Long> trips, BasePrice prices, String description, Date availableFrom, Date availableUntil, Boolean onlyPackaged, List<Long> boats, List<Long> boatrooms) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = prices;
  
      // verify the required parameter 'name' is set
      if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling addTicket",
      new ApiException(400, "Missing the required parameter 'name' when calling addTicket"));
      }
  
      // verify the required parameter 'trips' is set
      if (trips == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'trips' when calling addTicket",
      new ApiException(400, "Missing the required parameter 'trips' when calling addTicket"));
      }
  
      // verify the required parameter 'prices' is set
      if (prices == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'prices' when calling addTicket",
      new ApiException(400, "Missing the required parameter 'prices' when calling addTicket"));
      }
  

  // create path and map variables
  String path = "/ticket/add".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "description", description));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "available_from", availableFrom));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "available_until", availableUntil));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "only_packaged", onlyPackaged));
          queryParams.addAll(ApiInvoker.parameterToPairs("multi", "trips", trips));
          queryParams.addAll(ApiInvoker.parameterToPairs("multi", "boats", boats));
          queryParams.addAll(ApiInvoker.parameterToPairs("multi", "boatrooms", boatrooms));


      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (InlineResponse2014) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2014.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Create a new ticket
   * 
   * @param name    * @param trips    * @param prices    * @param description    * @param availableFrom    * @param availableUntil    * @param onlyPackaged    * @param boats    * @param boatrooms 
  */
  public void addTicket (String name, List<Long> trips, BasePrice prices, String description, Date availableFrom, Date availableUntil, Boolean onlyPackaged, List<Long> boats, List<Long> boatrooms, final Response.Listener<InlineResponse2014> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = prices;

  
    // verify the required parameter 'name' is set
    if (name == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'name' when calling addTicket",
         new ApiException(400, "Missing the required parameter 'name' when calling addTicket"));
    }
    
    // verify the required parameter 'trips' is set
    if (trips == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'trips' when calling addTicket",
         new ApiException(400, "Missing the required parameter 'trips' when calling addTicket"));
    }
    
    // verify the required parameter 'prices' is set
    if (prices == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'prices' when calling addTicket",
         new ApiException(400, "Missing the required parameter 'prices' when calling addTicket"));
    }
    

    // create path and map variables
    String path = "/ticket/add".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "description", description));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "available_from", availableFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "available_until", availableUntil));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "only_packaged", onlyPackaged));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "trips", trips));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "boats", boats));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "boatrooms", boatrooms));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse2014) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse2014.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete a ticket
  * 
   * @param name 
   * @return InlineResponse2014
  */
  public InlineResponse2014 deleteTicket (String name) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'name' is set
      if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling deleteTicket",
      new ApiException(400, "Missing the required parameter 'name' when calling deleteTicket"));
      }
  

  // create path and map variables
  String path = "/ticket/delete".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));


      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (InlineResponse2014) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2014.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Delete a ticket
   * 
   * @param name 
  */
  public void deleteTicket (String name, final Response.Listener<InlineResponse2014> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'name' is set
    if (name == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'name' when calling deleteTicket",
         new ApiException(400, "Missing the required parameter 'name' when calling deleteTicket"));
    }
    

    // create path and map variables
    String path = "/ticket/delete".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse2014) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse2014.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update an existing ticket
  * 
   * @param id 
   * @param name 
   * @param trips 
   * @param prices 
   * @param description 
   * @param availableFrom 
   * @param availableUntil 
   * @param onlyPackaged 
   * @param boats 
   * @param boatrooms 
   * @return InlineResponse2014
  */
  public InlineResponse2014 editTicket (Long id, String name, List<Long> trips, BasePrice prices, String description, Date availableFrom, Date availableUntil, Boolean onlyPackaged, List<Long> boats, List<Long> boatrooms) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = prices;
  
      // verify the required parameter 'id' is set
      if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling editTicket",
      new ApiException(400, "Missing the required parameter 'id' when calling editTicket"));
      }
  
      // verify the required parameter 'name' is set
      if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling editTicket",
      new ApiException(400, "Missing the required parameter 'name' when calling editTicket"));
      }
  
      // verify the required parameter 'trips' is set
      if (trips == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'trips' when calling editTicket",
      new ApiException(400, "Missing the required parameter 'trips' when calling editTicket"));
      }
  
      // verify the required parameter 'prices' is set
      if (prices == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'prices' when calling editTicket",
      new ApiException(400, "Missing the required parameter 'prices' when calling editTicket"));
      }
  

  // create path and map variables
  String path = "/ticket/edit".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "description", description));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "available_from", availableFrom));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "available_until", availableUntil));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "only_packaged", onlyPackaged));
          queryParams.addAll(ApiInvoker.parameterToPairs("multi", "trips", trips));
          queryParams.addAll(ApiInvoker.parameterToPairs("multi", "boats", boats));
          queryParams.addAll(ApiInvoker.parameterToPairs("multi", "boatrooms", boatrooms));


      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (InlineResponse2014) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2014.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Update an existing ticket
   * 
   * @param id    * @param name    * @param trips    * @param prices    * @param description    * @param availableFrom    * @param availableUntil    * @param onlyPackaged    * @param boats    * @param boatrooms 
  */
  public void editTicket (Long id, String name, List<Long> trips, BasePrice prices, String description, Date availableFrom, Date availableUntil, Boolean onlyPackaged, List<Long> boats, List<Long> boatrooms, final Response.Listener<InlineResponse2014> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = prices;

  
    // verify the required parameter 'id' is set
    if (id == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'id' when calling editTicket",
         new ApiException(400, "Missing the required parameter 'id' when calling editTicket"));
    }
    
    // verify the required parameter 'name' is set
    if (name == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'name' when calling editTicket",
         new ApiException(400, "Missing the required parameter 'name' when calling editTicket"));
    }
    
    // verify the required parameter 'trips' is set
    if (trips == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'trips' when calling editTicket",
         new ApiException(400, "Missing the required parameter 'trips' when calling editTicket"));
    }
    
    // verify the required parameter 'prices' is set
    if (prices == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'prices' when calling editTicket",
         new ApiException(400, "Missing the required parameter 'prices' when calling editTicket"));
    }
    

    // create path and map variables
    String path = "/ticket/edit".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "description", description));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "available_from", availableFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "available_until", availableUntil));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "only_packaged", onlyPackaged));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "trips", trips));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "boats", boats));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "boatrooms", boatrooms));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse2014) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse2014.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve all tickets that are available to booked today
  * 
   * @return List<Ticket>
  */
  public List<Ticket> getAllAvailableTickets () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/ticket/only-available".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (List<Ticket>) ApiInvoker.deserialize(localVarResponse, "array", Ticket.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Retrieve all tickets that are available to booked today
   * 

  */
  public void getAllAvailableTickets (final Response.Listener<List<Ticket>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/ticket/only-available".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Ticket>) ApiInvoker.deserialize(localVarResponse,  "array", Ticket.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve all tickets
  * 
   * @return List<Ticket>
  */
  public List<Ticket> getAllTickets () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/ticket/all".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (List<Ticket>) ApiInvoker.deserialize(localVarResponse, "array", Ticket.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Retrieve all tickets
   * 

  */
  public void getAllTickets (final Response.Listener<List<Ticket>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/ticket/all".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Ticket>) ApiInvoker.deserialize(localVarResponse,  "array", Ticket.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve all tickets
  * 
   * @return List<Ticket>
  */
  public List<Ticket> getAllWithTrashedTickets () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/ticket/all-with-trashed".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (List<Ticket>) ApiInvoker.deserialize(localVarResponse, "array", Ticket.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Retrieve all tickets
   * 

  */
  public void getAllWithTrashedTickets (final Response.Listener<List<Ticket>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/ticket/all-with-trashed".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Ticket>) ApiInvoker.deserialize(localVarResponse,  "array", Ticket.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve a ticket by ID
  * 
   * @param id 
   * @return Ticket
  */
  public Ticket getTicket (Long id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'id' is set
      if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling getTicket",
      new ApiException(400, "Missing the required parameter 'id' when calling getTicket"));
      }
  

  // create path and map variables
  String path = "/ticket".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));


      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (Ticket) ApiInvoker.deserialize(localVarResponse, "", Ticket.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Retrieve a ticket by ID
   * 
   * @param id 
  */
  public void getTicket (Long id, final Response.Listener<Ticket> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'id' is set
    if (id == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'id' when calling getTicket",
         new ApiException(400, "Missing the required parameter 'id' when calling getTicket"));
    }
    

    // create path and map variables
    String path = "/ticket".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Ticket) ApiInvoker.deserialize(localVarResponse,  "", Ticket.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
