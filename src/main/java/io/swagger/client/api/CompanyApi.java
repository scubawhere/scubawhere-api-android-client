/**
 * Scubawhere API Documentation
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.swagger.client.model.InlineResponse20023;
import io.swagger.client.model.ErrorModel;
import io.swagger.client.model.InlineResponse20024;
import io.swagger.client.model.InlineResponse20025;
import io.swagger.client.model.InlineResponse20026;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class CompanyApi {
  String basePath = "https://dev.scubawhere.com/api";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Attach a location to a company
  * 
   * @param name 
   * @param description 
   * @param latitude 
   * @param longitude 
   * @return InlineResponse20023
  */
  public InlineResponse20023 attachLocations (String name, String description, Float latitude, Float longitude) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/company/add-location".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "description", description));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "latitude", latitude));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "longitude", longitude));


      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (InlineResponse20023) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20023.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Attach a location to a company
   * 
   * @param name    * @param description    * @param latitude    * @param longitude 
  */
  public void attachLocations (String name, String description, Float latitude, Float longitude, final Response.Listener<InlineResponse20023> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/company/add-location".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "description", description));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "latitude", latitude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "longitude", longitude));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse20023) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse20023.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve the locations this Dive Centre uses
  * 
   * @param latitude 
   * @param longitude 
   * @param limit 
   * @return InlineResponse20024
  */
  public InlineResponse20024 getLocations (String latitude, String longitude, Integer limit) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'latitude' is set
      if (latitude == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'latitude' when calling getLocations",
      new ApiException(400, "Missing the required parameter 'latitude' when calling getLocations"));
      }
  
      // verify the required parameter 'longitude' is set
      if (longitude == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'longitude' when calling getLocations",
      new ApiException(400, "Missing the required parameter 'longitude' when calling getLocations"));
      }
  

  // create path and map variables
  String path = "/company/locations".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "latitude", latitude));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "longitude", longitude));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));


      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (InlineResponse20024) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20024.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Retrieve the locations this Dive Centre uses
   * 
   * @param latitude    * @param longitude    * @param limit 
  */
  public void getLocations (String latitude, String longitude, Integer limit, final Response.Listener<InlineResponse20024> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'latitude' is set
    if (latitude == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'latitude' when calling getLocations",
         new ApiException(400, "Missing the required parameter 'latitude' when calling getLocations"));
    }
    
    // verify the required parameter 'longitude' is set
    if (longitude == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'longitude' when calling getLocations",
         new ApiException(400, "Missing the required parameter 'longitude' when calling getLocations"));
    }
    

    // create path and map variables
    String path = "/company/locations".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "latitude", latitude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "longitude", longitude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse20024) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse20024.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve the pick up schedule for a date
  * 
   * @param date 
   * @return InlineResponse20025
  */
  public InlineResponse20025 getPickupSchedule (String date) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'date' is set
      if (date == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'date' when calling getPickupSchedule",
      new ApiException(400, "Missing the required parameter 'date' when calling getPickupSchedule"));
      }
  

  // create path and map variables
  String path = "/company/pick-up-schedule".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "date", date));


      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (InlineResponse20025) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20025.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Retrieve the pick up schedule for a date
   * 
   * @param date 
  */
  public void getPickupSchedule (String date, final Response.Listener<InlineResponse20025> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'date' is set
    if (date == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'date' when calling getPickupSchedule",
         new ApiException(400, "Missing the required parameter 'date' when calling getPickupSchedule"));
    }
    

    // create path and map variables
    String path = "/company/pick-up-schedule".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "date", date));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse20025) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse20025.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update the companies information
  * 
   * @param id 
   * @param contact 
   * @param description 
   * @param name 
   * @param address1 
   * @param address2 
   * @param city 
   * @param county 
   * @param postcode 
   * @param countryId 
   * @param currencyId 
   * @param businessPhone 
   * @param businessEmail 
   * @param vatNumber 
   * @param registrationNumber 
   * @param website 
   * @return InlineResponse20026
  */
  public InlineResponse20026 updateCompany (Long id, String contact, String description, String name, String address1, String address2, String city, String county, String postcode, Long countryId, Long currencyId, String businessPhone, String businessEmail, String vatNumber, String registrationNumber, String website) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'id' is set
      if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling updateCompany",
      new ApiException(400, "Missing the required parameter 'id' when calling updateCompany"));
      }
  

  // create path and map variables
  String path = "/company/update".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "contact", contact));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "description", description));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "address_1", address1));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "address_2", address2));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "city", city));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "county", county));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "postcode", postcode));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "country_id", countryId));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "currency_id", currencyId));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "business_phone", businessPhone));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "business_email", businessEmail));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "vat_number", vatNumber));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "registration_number", registrationNumber));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "website", website));


      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (InlineResponse20026) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20026.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Update the companies information
   * 
   * @param id    * @param contact    * @param description    * @param name    * @param address1    * @param address2    * @param city    * @param county    * @param postcode    * @param countryId    * @param currencyId    * @param businessPhone    * @param businessEmail    * @param vatNumber    * @param registrationNumber    * @param website 
  */
  public void updateCompany (Long id, String contact, String description, String name, String address1, String address2, String city, String county, String postcode, Long countryId, Long currencyId, String businessPhone, String businessEmail, String vatNumber, String registrationNumber, String website, final Response.Listener<InlineResponse20026> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'id' is set
    if (id == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'id' when calling updateCompany",
         new ApiException(400, "Missing the required parameter 'id' when calling updateCompany"));
    }
    

    // create path and map variables
    String path = "/company/update".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "contact", contact));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "description", description));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "address_1", address1));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "address_2", address2));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "city", city));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "county", county));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "postcode", postcode));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "country_id", countryId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "currency_id", currencyId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "business_phone", businessPhone));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "business_email", businessEmail));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "vat_number", vatNumber));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "registration_number", registrationNumber));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "website", website));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse20026) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse20026.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
