/**
 * Scubawhere API Documentation
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.swagger.client.model.InlineResponse20040;
import io.swagger.client.model.ErrorModel;
import java.util.Date;
import io.swagger.client.model.InlineResponse20041;
import io.swagger.client.model.InlineResponse20042;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ReportApi {
  String basePath = "https://dev.scubawhere.com/api";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Get a report containing the distribution of revenue made from all the tickets, packages, courses, addons, accommodations
  * 
   * @param after 
   * @param before 
   * @return InlineResponse20040
  */
  public InlineResponse20040 getRevenueStreamReport (Date after, Date before) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'after' is set
      if (after == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'after' when calling getRevenueStreamReport",
      new ApiException(400, "Missing the required parameter 'after' when calling getRevenueStreamReport"));
      }
  
      // verify the required parameter 'before' is set
      if (before == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'before' when calling getRevenueStreamReport",
      new ApiException(400, "Missing the required parameter 'before' when calling getRevenueStreamReport"));
      }
  

  // create path and map variables
  String path = "/report/revenue-streams".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "after", after));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "before", before));


      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (InlineResponse20040) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20040.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Get a report containing the distribution of revenue made from all the tickets, packages, courses, addons, accommodations
   * 
   * @param after    * @param before 
  */
  public void getRevenueStreamReport (Date after, Date before, final Response.Listener<InlineResponse20040> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'after' is set
    if (after == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'after' when calling getRevenueStreamReport",
         new ApiException(400, "Missing the required parameter 'after' when calling getRevenueStreamReport"));
    }
    
    // verify the required parameter 'before' is set
    if (before == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'before' when calling getRevenueStreamReport",
         new ApiException(400, "Missing the required parameter 'before' when calling getRevenueStreamReport"));
    }
    

    // create path and map variables
    String path = "/report/revenue-streams".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "after", after));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "before", before));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse20040) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse20040.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get a report about the distribution of revenue between the diffrent source of bookings
  * 
   * @param after 
   * @param before 
   * @return InlineResponse20041
  */
  public InlineResponse20041 getSourcesReport (Date after, Date before) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'after' is set
      if (after == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'after' when calling getSourcesReport",
      new ApiException(400, "Missing the required parameter 'after' when calling getSourcesReport"));
      }
  
      // verify the required parameter 'before' is set
      if (before == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'before' when calling getSourcesReport",
      new ApiException(400, "Missing the required parameter 'before' when calling getSourcesReport"));
      }
  

  // create path and map variables
  String path = "/report/sources".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "after", after));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "before", before));


      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (InlineResponse20041) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20041.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Get a report about the distribution of revenue between the diffrent source of bookings
   * 
   * @param after    * @param before 
  */
  public void getSourcesReport (Date after, Date before, final Response.Listener<InlineResponse20041> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'after' is set
    if (after == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'after' when calling getSourcesReport",
         new ApiException(400, "Missing the required parameter 'after' when calling getSourcesReport"));
    }
    
    // verify the required parameter 'before' is set
    if (before == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'before' when calling getSourcesReport",
         new ApiException(400, "Missing the required parameter 'before' when calling getSourcesReport"));
    }
    

    // create path and map variables
    String path = "/report/sources".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "after", after));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "before", before));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse20041) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse20041.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get a report containing the utilisation of all classes between the specified dates
  * 
   * @param after 
   * @param before 
   * @return InlineResponse20042
  */
  public InlineResponse20042 getTrainingUtilisationReport (Date after, Date before) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'after' is set
      if (after == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'after' when calling getTrainingUtilisationReport",
      new ApiException(400, "Missing the required parameter 'after' when calling getTrainingUtilisationReport"));
      }
  
      // verify the required parameter 'before' is set
      if (before == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'before' when calling getTrainingUtilisationReport",
      new ApiException(400, "Missing the required parameter 'before' when calling getTrainingUtilisationReport"));
      }
  

  // create path and map variables
  String path = "/report/training-utilisation".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "after", after));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "before", before));


      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (InlineResponse20042) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20042.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Get a report containing the utilisation of all classes between the specified dates
   * 
   * @param after    * @param before 
  */
  public void getTrainingUtilisationReport (Date after, Date before, final Response.Listener<InlineResponse20042> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'after' is set
    if (after == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'after' when calling getTrainingUtilisationReport",
         new ApiException(400, "Missing the required parameter 'after' when calling getTrainingUtilisationReport"));
    }
    
    // verify the required parameter 'before' is set
    if (before == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'before' when calling getTrainingUtilisationReport",
         new ApiException(400, "Missing the required parameter 'before' when calling getTrainingUtilisationReport"));
    }
    

    // create path and map variables
    String path = "/report/training-utilisation".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "after", after));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "before", before));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse20042) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse20042.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get a report containing the utilisation of all trips between the specified dates
  * 
   * @param after 
   * @param before 
   * @return InlineResponse20042
  */
  public InlineResponse20042 getUtilisationReport (Date after, Date before) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'after' is set
      if (after == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'after' when calling getUtilisationReport",
      new ApiException(400, "Missing the required parameter 'after' when calling getUtilisationReport"));
      }
  
      // verify the required parameter 'before' is set
      if (before == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'before' when calling getUtilisationReport",
      new ApiException(400, "Missing the required parameter 'before' when calling getUtilisationReport"));
      }
  

  // create path and map variables
  String path = "/report/utilisation".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "after", after));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "before", before));


      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (InlineResponse20042) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20042.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Get a report containing the utilisation of all trips between the specified dates
   * 
   * @param after    * @param before 
  */
  public void getUtilisationReport (Date after, Date before, final Response.Listener<InlineResponse20042> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'after' is set
    if (after == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'after' when calling getUtilisationReport",
         new ApiException(400, "Missing the required parameter 'after' when calling getUtilisationReport"));
    }
    
    // verify the required parameter 'before' is set
    if (before == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'before' when calling getUtilisationReport",
         new ApiException(400, "Missing the required parameter 'before' when calling getUtilisationReport"));
    }
    

    // create path and map variables
    String path = "/report/utilisation".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "after", after));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "before", before));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse20042) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse20042.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
