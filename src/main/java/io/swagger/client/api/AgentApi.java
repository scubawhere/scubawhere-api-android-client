/**
 * Scubawhere API Documentation
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.swagger.client.model.ErrorModel;
import io.swagger.client.model.InlineResponse2004;
import io.swagger.client.model.InlineResponse2003;
import io.swagger.client.model.Agent;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class AgentApi {
  String basePath = "https://dev.scubawhere.com/api";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Create a new agent
  * 
   * @param name 
   * @param branchName 
   * @param branchAddress 
   * @param branchPhone 
   * @param branchEmail 
   * @param commission 
   * @param terms 
   * @param website 
   * @param billingAddress 
   * @param billingPhone 
   * @param billingEmail 
   * @return InlineResponse2004
  */
  public InlineResponse2004 createAgent (Long name, String branchName, String branchAddress, String branchPhone, String branchEmail, Float commission, String terms, String website, String billingAddress, String billingPhone, String billingEmail) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'name' is set
      if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling createAgent",
      new ApiException(400, "Missing the required parameter 'name' when calling createAgent"));
      }
  
      // verify the required parameter 'branchName' is set
      if (branchName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'branchName' when calling createAgent",
      new ApiException(400, "Missing the required parameter 'branchName' when calling createAgent"));
      }
  
      // verify the required parameter 'branchAddress' is set
      if (branchAddress == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'branchAddress' when calling createAgent",
      new ApiException(400, "Missing the required parameter 'branchAddress' when calling createAgent"));
      }
  
      // verify the required parameter 'branchPhone' is set
      if (branchPhone == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'branchPhone' when calling createAgent",
      new ApiException(400, "Missing the required parameter 'branchPhone' when calling createAgent"));
      }
  
      // verify the required parameter 'branchEmail' is set
      if (branchEmail == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'branchEmail' when calling createAgent",
      new ApiException(400, "Missing the required parameter 'branchEmail' when calling createAgent"));
      }
  
      // verify the required parameter 'commission' is set
      if (commission == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'commission' when calling createAgent",
      new ApiException(400, "Missing the required parameter 'commission' when calling createAgent"));
      }
  
      // verify the required parameter 'terms' is set
      if (terms == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'terms' when calling createAgent",
      new ApiException(400, "Missing the required parameter 'terms' when calling createAgent"));
      }
  

  // create path and map variables
  String path = "/agent/add".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "website", website));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "branch_name", branchName));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "branch_address", branchAddress));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "branch_phone", branchPhone));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "branch_email", branchEmail));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "billing_address", billingAddress));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "billing_phone", billingPhone));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "billing_email", billingEmail));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "commission", commission));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "terms", terms));


      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (InlineResponse2004) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2004.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Create a new agent
   * 
   * @param name    * @param branchName    * @param branchAddress    * @param branchPhone    * @param branchEmail    * @param commission    * @param terms    * @param website    * @param billingAddress    * @param billingPhone    * @param billingEmail 
  */
  public void createAgent (Long name, String branchName, String branchAddress, String branchPhone, String branchEmail, Float commission, String terms, String website, String billingAddress, String billingPhone, String billingEmail, final Response.Listener<InlineResponse2004> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'name' is set
    if (name == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'name' when calling createAgent",
         new ApiException(400, "Missing the required parameter 'name' when calling createAgent"));
    }
    
    // verify the required parameter 'branchName' is set
    if (branchName == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'branchName' when calling createAgent",
         new ApiException(400, "Missing the required parameter 'branchName' when calling createAgent"));
    }
    
    // verify the required parameter 'branchAddress' is set
    if (branchAddress == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'branchAddress' when calling createAgent",
         new ApiException(400, "Missing the required parameter 'branchAddress' when calling createAgent"));
    }
    
    // verify the required parameter 'branchPhone' is set
    if (branchPhone == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'branchPhone' when calling createAgent",
         new ApiException(400, "Missing the required parameter 'branchPhone' when calling createAgent"));
    }
    
    // verify the required parameter 'branchEmail' is set
    if (branchEmail == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'branchEmail' when calling createAgent",
         new ApiException(400, "Missing the required parameter 'branchEmail' when calling createAgent"));
    }
    
    // verify the required parameter 'commission' is set
    if (commission == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'commission' when calling createAgent",
         new ApiException(400, "Missing the required parameter 'commission' when calling createAgent"));
    }
    
    // verify the required parameter 'terms' is set
    if (terms == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'terms' when calling createAgent",
         new ApiException(400, "Missing the required parameter 'terms' when calling createAgent"));
    }
    

    // create path and map variables
    String path = "/agent/add".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "website", website));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "branch_name", branchName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "branch_address", branchAddress));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "branch_phone", branchPhone));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "branch_email", branchEmail));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "billing_address", billingAddress));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "billing_phone", billingPhone));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "billing_email", billingEmail));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "commission", commission));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "terms", terms));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse2004) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse2004.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete an agent by ID
  * 
   * @param id ID of the Agent
   * @return InlineResponse2003
  */
  public InlineResponse2003 deleteAgent (Long id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'id' is set
      if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling deleteAgent",
      new ApiException(400, "Missing the required parameter 'id' when calling deleteAgent"));
      }
  

  // create path and map variables
  String path = "/agent/delete".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));


      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (InlineResponse2003) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2003.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Delete an agent by ID
   * 
   * @param id ID of the Agent
  */
  public void deleteAgent (Long id, final Response.Listener<InlineResponse2003> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'id' is set
    if (id == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'id' when calling deleteAgent",
         new ApiException(400, "Missing the required parameter 'id' when calling deleteAgent"));
    }
    

    // create path and map variables
    String path = "/agent/delete".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse2003) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse2003.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve an agent by ID
  * 
   * @param id ID of the agent to be retrieved
   * @return InlineResponse2004
  */
  public InlineResponse2004 getAgent (Long id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'id' is set
      if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling getAgent",
      new ApiException(400, "Missing the required parameter 'id' when calling getAgent"));
      }
  

  // create path and map variables
  String path = "/agent".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));


      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (InlineResponse2004) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2004.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Retrieve an agent by ID
   * 
   * @param id ID of the agent to be retrieved
  */
  public void getAgent (Long id, final Response.Listener<InlineResponse2004> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'id' is set
    if (id == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'id' when calling getAgent",
         new ApiException(400, "Missing the required parameter 'id' when calling getAgent"));
    }
    

    // create path and map variables
    String path = "/agent".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse2004) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse2004.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve all agents
  * 
   * @return List<Agent>
  */
  public List<Agent> getAllAgents () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/agent/all".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (List<Agent>) ApiInvoker.deserialize(localVarResponse, "array", Agent.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Retrieve all agents
   * 

  */
  public void getAllAgents (final Response.Listener<List<Agent>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/agent/all".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Agent>) ApiInvoker.deserialize(localVarResponse,  "array", Agent.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve all agents including any deleted models
  * 
   * @return List<Agent>
  */
  public List<Agent> getAllWithTrashedAgents () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/agent/all-with-trashed".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (List<Agent>) ApiInvoker.deserialize(localVarResponse, "array", Agent.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Retrieve all agents including any deleted models
   * 

  */
  public void getAllWithTrashedAgents (final Response.Listener<List<Agent>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/agent/all-with-trashed".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Agent>) ApiInvoker.deserialize(localVarResponse,  "array", Agent.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
