/**
 * Scubawhere API Documentation
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.swagger.client.model.InlineResponse200;
import io.swagger.client.model.ErrorModel;
import io.swagger.client.model.InlineResponse2004;
import java.util.Date;
import io.swagger.client.model.Accommodation;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class AccommodationApi {
  String basePath = "https://dev.scubawhere.com/api";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * 
  * Create an accommodation
   * @param name Name of the type of accommodation
   * @param capacity Number of beds in the accommodation
   * @param basePrices Price of the accommodation and the dates of when the price is applicable
   * @param description Description of the accommodation
   * @return InlineResponse200
  */
  public InlineResponse200 addAccommodation (String name, Long capacity, Integer basePrices, String description) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'name' is set
      if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling addAccommodation",
      new ApiException(400, "Missing the required parameter 'name' when calling addAccommodation"));
      }
  
      // verify the required parameter 'capacity' is set
      if (capacity == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'capacity' when calling addAccommodation",
      new ApiException(400, "Missing the required parameter 'capacity' when calling addAccommodation"));
      }
  
      // verify the required parameter 'basePrices' is set
      if (basePrices == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'basePrices' when calling addAccommodation",
      new ApiException(400, "Missing the required parameter 'basePrices' when calling addAccommodation"));
      }
  

  // create path and map variables
  String path = "/accommodation/add".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "description", description));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "capacity", capacity));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "base_prices", basePrices));


      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (InlineResponse200) ApiInvoker.deserialize(localVarResponse, "", InlineResponse200.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 
   * Create an accommodation
   * @param name Name of the type of accommodation   * @param capacity Number of beds in the accommodation   * @param basePrices Price of the accommodation and the dates of when the price is applicable   * @param description Description of the accommodation
  */
  public void addAccommodation (String name, Long capacity, Integer basePrices, String description, final Response.Listener<InlineResponse200> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'name' is set
    if (name == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'name' when calling addAccommodation",
         new ApiException(400, "Missing the required parameter 'name' when calling addAccommodation"));
    }
    
    // verify the required parameter 'capacity' is set
    if (capacity == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'capacity' when calling addAccommodation",
         new ApiException(400, "Missing the required parameter 'capacity' when calling addAccommodation"));
    }
    
    // verify the required parameter 'basePrices' is set
    if (basePrices == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'basePrices' when calling addAccommodation",
         new ApiException(400, "Missing the required parameter 'basePrices' when calling addAccommodation"));
    }
    

    // create path and map variables
    String path = "/accommodation/add".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "description", description));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "capacity", capacity));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "base_prices", basePrices));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse200) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse200.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete an accommodation by ID
  * 
   * @param body ID of the accommodation
   * @return InlineResponse200
  */
  public InlineResponse200 deleteAccommodation (Long body) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'body' is set
      if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling deleteAccommodation",
      new ApiException(400, "Missing the required parameter 'body' when calling deleteAccommodation"));
      }
  

  // create path and map variables
  String path = "/accommodation/delete".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "body", body));


      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (InlineResponse200) ApiInvoker.deserialize(localVarResponse, "", InlineResponse200.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Delete an accommodation by ID
   * 
   * @param body ID of the accommodation
  */
  public void deleteAccommodation (Long body, final Response.Listener<InlineResponse200> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'body' is set
    if (body == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'body' when calling deleteAccommodation",
         new ApiException(400, "Missing the required parameter 'body' when calling deleteAccommodation"));
    }
    

    // create path and map variables
    String path = "/accommodation/delete".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "body", body));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse200) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse200.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create a new agent
  * 
   * @param id 
   * @param name 
   * @param branchName 
   * @param branchAddress 
   * @param branchPhone 
   * @param branchEmail 
   * @param commission 
   * @param terms 
   * @param website 
   * @param billingAddress 
   * @param billingPhone 
   * @param billingEmail 
   * @return InlineResponse2004
  */
  public InlineResponse2004 editAgent (Long id, Long name, String branchName, String branchAddress, String branchPhone, String branchEmail, Float commission, String terms, String website, String billingAddress, String billingPhone, String billingEmail) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'id' is set
      if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling editAgent",
      new ApiException(400, "Missing the required parameter 'id' when calling editAgent"));
      }
  
      // verify the required parameter 'name' is set
      if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling editAgent",
      new ApiException(400, "Missing the required parameter 'name' when calling editAgent"));
      }
  
      // verify the required parameter 'branchName' is set
      if (branchName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'branchName' when calling editAgent",
      new ApiException(400, "Missing the required parameter 'branchName' when calling editAgent"));
      }
  
      // verify the required parameter 'branchAddress' is set
      if (branchAddress == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'branchAddress' when calling editAgent",
      new ApiException(400, "Missing the required parameter 'branchAddress' when calling editAgent"));
      }
  
      // verify the required parameter 'branchPhone' is set
      if (branchPhone == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'branchPhone' when calling editAgent",
      new ApiException(400, "Missing the required parameter 'branchPhone' when calling editAgent"));
      }
  
      // verify the required parameter 'branchEmail' is set
      if (branchEmail == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'branchEmail' when calling editAgent",
      new ApiException(400, "Missing the required parameter 'branchEmail' when calling editAgent"));
      }
  
      // verify the required parameter 'commission' is set
      if (commission == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'commission' when calling editAgent",
      new ApiException(400, "Missing the required parameter 'commission' when calling editAgent"));
      }
  
      // verify the required parameter 'terms' is set
      if (terms == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'terms' when calling editAgent",
      new ApiException(400, "Missing the required parameter 'terms' when calling editAgent"));
      }
  

  // create path and map variables
  String path = "/agent/edit".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "website", website));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "branch_name", branchName));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "branch_address", branchAddress));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "branch_phone", branchPhone));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "branch_email", branchEmail));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "billing_address", billingAddress));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "billing_phone", billingPhone));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "billing_email", billingEmail));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "commission", commission));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "terms", terms));


      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (InlineResponse2004) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2004.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Create a new agent
   * 
   * @param id    * @param name    * @param branchName    * @param branchAddress    * @param branchPhone    * @param branchEmail    * @param commission    * @param terms    * @param website    * @param billingAddress    * @param billingPhone    * @param billingEmail 
  */
  public void editAgent (Long id, Long name, String branchName, String branchAddress, String branchPhone, String branchEmail, Float commission, String terms, String website, String billingAddress, String billingPhone, String billingEmail, final Response.Listener<InlineResponse2004> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'id' is set
    if (id == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'id' when calling editAgent",
         new ApiException(400, "Missing the required parameter 'id' when calling editAgent"));
    }
    
    // verify the required parameter 'name' is set
    if (name == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'name' when calling editAgent",
         new ApiException(400, "Missing the required parameter 'name' when calling editAgent"));
    }
    
    // verify the required parameter 'branchName' is set
    if (branchName == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'branchName' when calling editAgent",
         new ApiException(400, "Missing the required parameter 'branchName' when calling editAgent"));
    }
    
    // verify the required parameter 'branchAddress' is set
    if (branchAddress == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'branchAddress' when calling editAgent",
         new ApiException(400, "Missing the required parameter 'branchAddress' when calling editAgent"));
    }
    
    // verify the required parameter 'branchPhone' is set
    if (branchPhone == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'branchPhone' when calling editAgent",
         new ApiException(400, "Missing the required parameter 'branchPhone' when calling editAgent"));
    }
    
    // verify the required parameter 'branchEmail' is set
    if (branchEmail == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'branchEmail' when calling editAgent",
         new ApiException(400, "Missing the required parameter 'branchEmail' when calling editAgent"));
    }
    
    // verify the required parameter 'commission' is set
    if (commission == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'commission' when calling editAgent",
         new ApiException(400, "Missing the required parameter 'commission' when calling editAgent"));
    }
    
    // verify the required parameter 'terms' is set
    if (terms == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'terms' when calling editAgent",
         new ApiException(400, "Missing the required parameter 'terms' when calling editAgent"));
    }
    

    // create path and map variables
    String path = "/agent/edit".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "website", website));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "branch_name", branchName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "branch_address", branchAddress));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "branch_phone", branchPhone));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "branch_email", branchEmail));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "billing_address", billingAddress));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "billing_phone", billingPhone));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "billing_email", billingEmail));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "commission", commission));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "terms", terms));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse2004) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse2004.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get all the accommodations matching a filter
  * Get all the accommodations and their bookings between certain dates and / or an accommodation id
   * @param before The date for the upper boundary of the dates
   * @param after The date for the lower boundary of the dates
   * @param accommodationId ID Accommodation to filter by
   * @return InlineResponse200
  */
  public InlineResponse200 filterAccommodation (Date before, Date after, Long accommodationId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/accommodation/filter".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "before", before));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "after", after));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "accommodation_id", accommodationId));


      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (InlineResponse200) ApiInvoker.deserialize(localVarResponse, "", InlineResponse200.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Get all the accommodations matching a filter
   * Get all the accommodations and their bookings between certain dates and / or an accommodation id
   * @param before The date for the upper boundary of the dates   * @param after The date for the lower boundary of the dates   * @param accommodationId ID Accommodation to filter by
  */
  public void filterAccommodation (Date before, Date after, Long accommodationId, final Response.Listener<InlineResponse200> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/accommodation/filter".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "before", before));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "after", after));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "accommodation_id", accommodationId));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse200) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse200.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve an accommodation by ID
   * @param id ID of the accommodation to be retrieved
   * @return InlineResponse200
  */
  public InlineResponse200 findAccommodation (List<Long> id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'id' is set
      if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling findAccommodation",
      new ApiException(400, "Missing the required parameter 'id' when calling findAccommodation"));
      }
  

  // create path and map variables
  String path = "/accommodation".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("multi", "id", id));


      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (InlineResponse200) ApiInvoker.deserialize(localVarResponse, "", InlineResponse200.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 
   * Retrieve an accommodation by ID
   * @param id ID of the accommodation to be retrieved
  */
  public void findAccommodation (List<Long> id, final Response.Listener<InlineResponse200> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'id' is set
    if (id == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'id' when calling findAccommodation",
         new ApiException(400, "Missing the required parameter 'id' when calling findAccommodation"));
    }
    

    // create path and map variables
    String path = "/accommodation".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "id", id));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse200) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse200.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve all accommodation
   * @return List<Accommodation>
  */
  public List<Accommodation> getAllAccommodations () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/accommodations/all".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (List<Accommodation>) ApiInvoker.deserialize(localVarResponse, "array", Accommodation.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 
   * Retrieve all accommodation

  */
  public void getAllAccommodations (final Response.Listener<List<Accommodation>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/accommodations/all".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Accommodation>) ApiInvoker.deserialize(localVarResponse,  "array", Accommodation.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve all accommodation including any deleted models
  * 
   * @return List<Accommodation>
  */
  public List<Accommodation> getAllWithTrashedAccommodations () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/accommodations/all-with-trashed".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (List<Accommodation>) ApiInvoker.deserialize(localVarResponse, "array", Accommodation.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Retrieve all accommodation including any deleted models
   * 

  */
  public void getAllWithTrashedAccommodations (final Response.Listener<List<Accommodation>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/accommodations/all-with-trashed".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Accommodation>) ApiInvoker.deserialize(localVarResponse,  "array", Accommodation.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update an Accommodation
  * Updates the accommodation by id using the specified fields
   * @param id ID of the Accommodation to be updated
   * @param name Name of the Accommodation
   * @param capacity Number of rooms the accommodation holds
   * @return InlineResponse200
  */
  public InlineResponse200 updateAccommodation (Long id, String name, Long capacity) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'id' is set
      if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling updateAccommodation",
      new ApiException(400, "Missing the required parameter 'id' when calling updateAccommodation"));
      }
  

  // create path and map variables
  String path = "/accommodation/edit".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "capacity", capacity));


      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (InlineResponse200) ApiInvoker.deserialize(localVarResponse, "", InlineResponse200.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Update an Accommodation
   * Updates the accommodation by id using the specified fields
   * @param id ID of the Accommodation to be updated   * @param name Name of the Accommodation   * @param capacity Number of rooms the accommodation holds
  */
  public void updateAccommodation (Long id, String name, Long capacity, final Response.Listener<InlineResponse200> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'id' is set
    if (id == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'id' when calling updateAccommodation",
         new ApiException(400, "Missing the required parameter 'id' when calling updateAccommodation"));
    }
    

    // create path and map variables
    String path = "/accommodation/edit".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "capacity", capacity));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse200) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse200.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
